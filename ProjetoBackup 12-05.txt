module Projeto where


type ChargingStationID = ContractId ChargingStation
type BillID = ContractId Bill
type ListOfCPFreeID = ContractId ListOfCPFree
type ListOfCPUsedID = ContractId ListOfCPUsed
type ListOfUsersWithDebtID = ContractId ListOfUsersWithDebt
-- type CPFreeID = ContractId CPFree
type CPUsedID = ContractId CPUsed

-- Condominio, condóminos, energyProvider (quem põe as chargingStations)

template Offer
    with
        chargingStation : ChargingStation
    where
        signatory chargingStation.energy_provider
        observer chargingStation.condominium

        choice Accept : ChargingStationID 
            with
                listOfParties : [Party]
            controller chargingStation.condominium
                do
                    create chargingStation with listOfParties
              
        
-- data EVUserAndCP = EVUserAndCP
--     with
--         ev_user : Party
--         cp_id : Text
--     deriving (Show)

-- instance Eq EVUserAndCP where
--     (EVUserAndCP user1 cp1) == (EVUserAndCP user2 cp2) = user1 == user2 && cp1 == cp2


-- template CPFree --representa um charging point livre
--     with
--         energy_provider : Party
--         condominium : Party
--         cp_id : Text
--     where
--         signatory energy_provider, condominium
--         key (energy_provider, condominium, cp_id) : (Party, Party, Text)
--         maintainer key._1, key._2

--         choice Use : ContractId CPUsed 
--             with
--                 ev_user : Party
--                 cid : ChargingStationID
--             controller ev_user
--                 do
--                     exercise cid UpdateCpFreeAndUsed with ev_user = ev_user,  cp_id = cp_id

template ListOfCPFree
    with
        listOfCPFree : [Text]
        energy_provider : Party
        condominium : Party
    where
        signatory energy_provider, condominium

        choice Add : ListOfCPFreeID
            with
                cp_free : Text
            controller energy_provider
                do 
                    if cp_free `notElem` listOfCPFree then 
                        do  create this with listOfCPFree = cp_free :: listOfCPFree
                    else
                        do error "Charging point already exists"

        choice Remove : ListOfCPFreeID
            with 
                cp_free : Text
            controller energy_provider
                do 
                    let newList = filter (/= cp_free) listOfCPFree
                    create this with listOfCPFree = newList

        nonconsuming choice GetFirst : Text
            controller energy_provider
                do 
                    case listOfCPFree of
                        [] -> error "No charging points available"
                        x :: xs -> do
                            return x

        nonconsuming choice IsEmpty : Bool
            controller energy_provider
                do 
                    case listOfCPFree of
                        [] -> return True
                        x :: xs -> return False

template CPUsed
    with 
        energy_provider : Party
        condominium : Party
        ev_user : Party
        cp_id : Text
        -- isConnected : Bool
    where
        signatory energy_provider
        observer condominium, ev_user

        -- choice Use : CPUsedID
        --     with
        --         listOfCPUsed : ListOfCPUsedID --o user pode aldabrar o id?
        --     controller ev_user
        --         do
        --             if isConnected then
        --                 do
        --                     error "Charging point is already being used"
        --             else
        --                 create this with isConnected = True

        nonconsuming choice Finish : ContractId RequestFinishCharge
            controller ev_user
                do
                    create RequestFinishCharge with ev_user = ev_user, energy_provider = energy_provider, cp_used = self, cp_id = cp_id 

        


template ListOfCPUsed
    with
        listOfCPUsed : [CPUsedID]
        energy_provider : Party
        condominium : Party
    where
        signatory energy_provider, condominium

        choice AddCPUsed : ListOfCPUsedID
            with
                cp_used : CPUsedID
            controller energy_provider
                do 
                    create this with listOfCPUsed = cp_used :: listOfCPUsed

        choice RemoveCPUsed : ListOfCPUsedID
            with 
                cp_used : CPUsedID
            controller energy_provider
                do 
                    let newList = filter (/= cp_used) listOfCPUsed
                    create this with listOfCPUsed = newList

template ListOfUsersWithDebt
    with
        listOfUsersWithDebt : [Party]
        energy_provider : Party
        condominium : Party
    where
        signatory energy_provider, condominium


        nonconsuming choice CheckIfUserHasDebt : Bool
            with 
                ev_user : Party
            controller energy_provider
                do 
                    let check =  ev_user `elem` listOfUsersWithDebt
                    return check
                    

        choice AddUserWithDebt : ListOfUsersWithDebtID
            with
                user : Party
            controller energy_provider
                do 
                    create this with listOfUsersWithDebt = user :: listOfUsersWithDebt

        choice RemoveUserWithDebt : ListOfUsersWithDebtID
            with 
                user : Party
            controller energy_provider
                do 
                    let newList = filter (/= user) listOfUsersWithDebt
                    create this with listOfUsersWithDebt = newList



template UserRequestCharging
    with    
        ev_user : Party
        energy_provider : Party
    where
        signatory ev_user, energy_provider

        choice Approve : ListsAndCPUsed
            with
                cs_id : ChargingStationID
                listOfCPFree : ListOfCPFreeID
                listOfUsersWithDebt : ListOfUsersWithDebtID
                listOfCPUsed : ListOfCPUsedID
            controller energy_provider
                do exercise cs_id ApproveRequestCPFreeToCPUsed with ev_user = ev_user, listOfCPFree = listOfCPFree, listOfUsersWithDebt = listOfUsersWithDebt, listOfCPUsed = listOfCPUsed


data ListsAndCPUsed = ListsAndCPUsed
    with    
        list_free : ListOfCPFreeID
        list_used : ListOfCPUsedID
        cp_used : CPUsedID

data CPLists = CPLists
    with    
        list_free : ListOfCPFreeID
        list_used : ListOfCPUsedID

template ChargingStation
    with
        energy_provider : Party
        condominium : Party
        listOfParties : [Party]
        -- usersWithDebts : [Party] 
        max_energy : Decimal
        -- cp_free : ListOfCPFreeID
        -- cp_used : ListOfCPUsedID
    where
        ensure max_energy > 0.0
        signatory energy_provider, condominium
        observer listOfParties


        nonconsuming choice CreateListOfCPUsed : ListOfCPUsedID
            controller energy_provider
                do
                    create ListOfCPUsed with listOfCPUsed = [], energy_provider = energy_provider, condominium = condominium


        nonconsuming choice CreateListOfCPFree : ListOfCPFreeID
            with
                listOfCPFree : [Text]
            controller energy_provider
                do
                    create ListOfCPFree with listOfCPFree = listOfCPFree, energy_provider = energy_provider, condominium = condominium 


        nonconsuming choice CreateListOfUsersWithDebt : ListOfUsersWithDebtID
            controller energy_provider
                do
                    create ListOfUsersWithDebt with listOfUsersWithDebt = [], energy_provider = energy_provider, condominium = condominium


        nonconsuming choice RequestCPFreeToCPUsed : ContractId UserRequestCharging
            with 
                ev_user : Party
            controller ev_user
                do
                    if ev_user `notElem` listOfParties then 
                        do 
                            error "User not allowed to charge here"
                    else
                        create UserRequestCharging with ev_user = ev_user, energy_provider = energy_provider


        nonconsuming choice ApproveRequestCPFreeToCPUsed : ListsAndCPUsed
            with
                ev_user : Party
                listOfCPFree : ListOfCPFreeID
                listOfCPUsed : ListOfCPUsedID
                listOfUsersWithDebt : ListOfUsersWithDebtID
            controller energy_provider
                do 
                    hasDebt <- exercise listOfUsersWithDebt CheckIfUserHasDebt with ev_user = ev_user 
                    if hasDebt then
                        do
                            error "User has debts"
                        else do
                            isEmpty <- exercise listOfCPFree IsEmpty
                            if not isEmpty then
                                do
                                    first_cp_free <-  exercise listOfCPFree GetFirst
                                    listOfCPFree_id <- exercise listOfCPFree Remove with cp_free = first_cp_free
                                    cp_used_id <- create CPUsed with energy_provider = energy_provider, condominium = condominium, ev_user = ev_user, cp_id = first_cp_free --, isConnected = False
                                    listOfCPUsed_id <- exercise listOfCPUsed AddCPUsed with cp_used = cp_used_id
                                    return (ListsAndCPUsed with list_free = listOfCPFree_id, list_used = listOfCPUsed_id, cp_used = cp_used_id)
                            else do error "No Charging Points available"


        nonconsuming choice UpdateCPUsedToCPFree : CPLists
            with
                cp_used : CPUsedID
                cp_id : Text
                listOfCPFree_id : ListOfCPFreeID
                listOfCPUsed_id : ListOfCPUsedID
            controller energy_provider
                do
                    listOfCPFree_id <- exercise listOfCPFree_id Add with cp_free = cp_id
                    listOfCPUsed_id <- exercise listOfCPUsed_id RemoveCPUsed with cp_used = cp_used
                    return (CPLists with list_free = listOfCPFree_id, list_used = listOfCPUsed_id)


        choice UpdateListOfParties : ChargingStationID
            with 
                newListOfParties : [Party]
            controller condominium
                do
                    create this with listOfParties = newListOfParties
        

        choice AddNewParty : ChargingStationID
            with 
                new_party : Party
            controller condominium
                do
                    create this with listOfParties = new_party :: listOfParties

        choice RemoveParty : ChargingStationID
            with 
                party_to_remove : Party
            controller condominium
                do
                    let newList = filter (/= party_to_remove) listOfParties
                    create this with listOfParties = newList

        choice UpdateMaxEnergy : ChargingStationID
            with 
                new_max_energy : Decimal
            controller energy_provider, condominium 
                do
                    create this with max_energy = new_max_energy

        -- choice AddNewCP : ChargingStationID
        --     with 
        --         new_cp : Text
        --     controller energy_provider
        --         do
        --             create this with cp_free = new_cp :: cp_free
            
        -- choice RemoveCP : ChargingStationID
        --     with 
        --         cp_to_remove : Text
        --     controller energy_provider
        --         do
        --             let newList = filter (/= cp_to_remove) cp_free
        --             create this with cp_free = cp_free


        -- choice RemoveUserFromUserWithDebts : ChargingStationID
        --     with 
        --         user_to_remove : Party
        --     controller energy_provider
        --         do
        --             let newList = filter (/= user_to_remove) usersWithDebts
        --             create this with usersWithDebts = newList

        -- choice Call : ContractId Type with
        --    party : Party
        --  controller party
        --     do
              
        -- nonconsuming choice RequestFinishCharging : RequestFinishChargeId
        --     controller ev_user
        --         do
        --             create RequestFinishCharge with ev_user, energy_provider

        -- choice ApproveFinishCharging : BillidWithCSid
        --     with
        --         ev_user : Party 
        --         energy : Decimal
        --         price : Decimal
        --     controller ev_user, energy_provider
        --         do
        --             let verification = find (\x -> x.ev_user == ev_user) cp_used
        --             case verification of
        --                 (Some (EVUserAndCP user cp))  -> 
        --                     do  
        --                         bill_id <- create Bill with energy_provider = energy_provider, condominium = condominium, energy_spend = energy, price = price, hour = "00:00", ev_user = ev_user, cp_id = cp, isPaid = False
        --                         cs_id <- create this with usersWithDebts = ev_user :: usersWithDebts, cp_free = cp :: cp_free, cp_used = filter (/= EVUserAndCP with ev_user = ev_user, cp_id = cp) cp_used
        --                         return BillidWithCSid with bill_id = bill_id, cs_id = cs_id 
        --                 _ -> error "User not charging here"

data AllListsAndBill = AllListsAndBill
    with 
        list_free : ListOfCPFreeID
        list_used : ListOfCPUsedID
        list_users_with_debt : ListOfUsersWithDebtID
        bill_id : BillID

template RequestFinishCharge
    with
        ev_user : Party
        energy_provider : Party
        cp_used : CPUsedID
        cp_id : Text
    where
        signatory ev_user, energy_provider
        
        choice ApproveRequestFinishCharge : AllListsAndBill
            with
                energy_spend : Decimal
                price : Decimal
                listOfCPFree_id : ListOfCPFreeID
                listOfCPUsed_id : ListOfCPUsedID
                listOfUsersWithDebt_id : ListOfUsersWithDebtID
                condominium : Party
                cs_id : ChargingStationID
            controller energy_provider
                do
                    lists <- exercise cs_id UpdateCPUsedToCPFree with cp_used = cp_used, cp_id = cp_id, listOfCPFree_id = listOfCPFree_id, listOfCPUsed_id = listOfCPUsed_id
                    listOfUsersWithDebt_id <- exercise listOfUsersWithDebt_id AddUserWithDebt with user = ev_user
                    bill_id <- create Bill with energy_provider = energy_provider, condominium = condominium, ev_user = ev_user, energy_spend = energy_spend, price = price, isPaid = False, cp_id = cp_id
                    archive cp_used
                    return (AllListsAndBill with list_free = lists.list_free, list_used = lists.list_used, list_users_with_debt = listOfUsersWithDebt_id, bill_id = bill_id)
--teste

-- data BillidWithCSid = BillidWithCSid
--     with
--         bill_id : BillID
--         cs_id : ChargingStationID


template UserRequestCompletedPayment
    with
        bill_id : BillID
        energy_provider : Party
        ev_user : Party
        condominium : Party
    where
        signatory energy_provider, ev_user
        observer condominium

        choice ApproveUserRequestCompletedPayment : ListOfUsersWithDebtID
            with
                listOfUsersWithDebt_id : ListOfUsersWithDebtID
            controller energy_provider
                do
                    exercise bill_id ChangeToTrue
                    exercise listOfUsersWithDebt_id RemoveUserWithDebt with user = ev_user 
                    

template Bill
    with 
        energy_provider : Party
        condominium : Party
        energy_spend : Decimal
        price : Decimal
        -- hour : Text
        ev_user : Party
        cp_id : Text
        isPaid : Bool
    where
        signatory energy_provider, ev_user
        observer condominium

        choice ChangeToTrue : ()
            controller energy_provider
                do
                    bill_id <- create this with isPaid = True
                    archive bill_id

        nonconsuming choice RequestCompletedPayment : ContractId UserRequestCompletedPayment
            controller ev_user
                do
                    create UserRequestCompletedPayment with bill_id = self, energy_provider = energy_provider, ev_user = ev_user, condominium = condominium
                    


