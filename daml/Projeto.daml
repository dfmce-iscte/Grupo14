module Projeto where

import DA.List

type ChargingStationID = ContractId ChargingStation
-- type CPFreeID = ContractId CPFree
type CPUsedID = ContractId CPUsed
type UserWithDebtID = ContractId UserWithDebt

-- Condominio, condóminos, energyProvider (quem põe as chargingStations)


--Energy_provider faz offer ao Condominio
template Offer
    with
        chargingStation : ChargingStation
    where
        signatory chargingStation.energy_provider
        observer chargingStation.condominium

        choice Accept : ChargingStationID 
            with
                listOfParties : [Party]
                cpList : [Text]
            controller chargingStation.condominium
                do
                    mapA (\x -> create CPFree with energy_provider = chargingStation.energy_provider; condominium = chargingStation.condominium; cp = x) cpList
                    create chargingStation with listOfParties, cpList = cpList
              


template CPUsed
    with 
        energy_provider : Party
        condominium : Party
        ev_user : Party
        cp_id : Text
        power : Decimal
    where
        signatory energy_provider, condominium
        observer ev_user
        key (energy_provider, condominium, ev_user) : (Party, Party, Party)
        maintainer [key._1, key._2]


        nonconsuming choice RequestFinishing : ContractId RequestFinishCharge
            controller ev_user
                do
                    create RequestFinishCharge with ev_user = ev_user, condominium = condominium, energy_provider = energy_provider, cp_id = cp_id 

        

template CPFree
  with
    energy_provider : Party
    condominium : Party
    cp : Text
  where
    signatory condominium, energy_provider
    key (energy_provider, condominium, cp) : (Party, Party, Text)
    maintainer [key._1, key._2]


template UserWithDebt 
    with 
        ev_user : Party
        energy_provider : Party
        condominium : Party
        price : Decimal
    where
        signatory energy_provider, condominium, ev_user
        key (energy_provider, condominium, ev_user) : (Party, Party, Party)
        maintainer [key._1, key._2]


        nonconsuming choice RequestToCompletePayment : ContractId UserRequestCompletedPayment 
            controller ev_user
                do create UserRequestCompletedPayment with ev_user = ev_user, energy_provider = energy_provider, condominium = condominium

    

template UserRequestCharging
    with    
        ev_user : Party
        energy_provider : Party
        condominium : Party
    where
        signatory ev_user, energy_provider, condominium

        choice Approve : CPUsedID
            with
                cs_id : ChargingStationID
            controller energy_provider
                do
                    userHasDebt <- visibleByKey @UserWithDebt (energy_provider, condominium, ev_user)
                    if (not userHasDebt) then
                        do 
                            cp <- exercise cs_id GetACPFree 
                            exerciseByKey @CPFree (energy_provider, condominium, cp) Archive
                            power <- exercise cs_id PowerForCP
                            create CPUsed with energy_provider = energy_provider, condominium = condominium, power = power, ev_user = ev_user, cp_id = cp
                    else do error "User has debts"



template ChargingStation
    with
        energy_provider : Party
        condominium : Party
        listOfParties : [Party]
        max_energy : Decimal
        cpList : [Text]
    where
        ensure max_energy > 0.0
        signatory energy_provider, condominium
        observer listOfParties
        key (energy_provider, condominium) : (Party, Party)
        maintainer [key._1, key._2]

        nonconsuming choice PowerForCP : Decimal
            controller energy_provider
                do 
                    let total_cp = intToDecimal (length cpList)
                    return (max_energy / total_cp)


        nonconsuming choice GetACPFree : Text
            controller energy_provider
                do
                    isCpFreeList <- mapA (\x -> visibleByKey @CPFree (energy_provider, condominium, x)) cpList
                    let index = elemIndex True isCpFreeList
                    case index of 
                        Some index  -> do 
                                            let cp = cpList !! index
                                            return cp
                        _-> error "No CP available" 

        nonconsuming choice IsCPValid : Bool
            with
                cp : Text
            controller energy_provider
                do
                    if cp `elem` cpList then
                        return True
                    else
                        return False


        nonconsuming choice RequestCPFreeToCPUsed : ContractId UserRequestCharging
            with 
                ev_user : Party
            controller ev_user
                do
                    if ev_user `notElem` listOfParties then 
                        do 
                            error "User not allowed to charge here"
                    else
                        create UserRequestCharging with ev_user = ev_user, energy_provider = energy_provider, condominium = condominium

        choice AddNewCP : ChargingStationID
            with 
                new_cp : Text
            controller energy_provider
                do
                    if new_cp `elem` cpList then
                        do
                            error "CP already exists"
                    else
                        do
                            create CPFree with energy_provider = energy_provider, condominium = condominium, cp = new_cp
                            create this with cpList = new_cp :: cpList

        choice RemoveCP : ChargingStationID
            with 
                cp_to_remove : Text
            controller energy_provider
                do
                    if cp_to_remove `notElem` cpList then
                        do
                            error "CP doesn't exist"
                    else
                        do
                            let newList = filter (/= cp_to_remove) cpList
                            exerciseByKey @CPFree (energy_provider, condominium, cp_to_remove) Archive
                            create this with cpList = newList


        choice UpdateListOfParties : ChargingStationID
            with 
                newListOfParties : [Party]
            controller condominium
                do
                    create this with listOfParties = newListOfParties
        

        choice AddNewParty : ChargingStationID
            with 
                new_party : Party
            controller condominium
                do
                    if new_party `elem` listOfParties then
                        do
                            error "Party already exists"
                    else
                        do
                            create this with listOfParties = new_party :: listOfParties

        choice RemoveParty : ChargingStationID
            with 
                party_to_remove : Party
            controller condominium
                do
                    if party_to_remove `notElem` listOfParties then
                        do
                            error "Party doesn't exist"
                    else
                        do
                            let newList = filter (/= party_to_remove) listOfParties
                            create this with listOfParties = newList

        nonconsuming choice EnergyProviderRequestMaxEnergy : ContractId EnergyProviderRequestUpdateMaxEnergy
            with 
                new_max_energy : Decimal
            controller energy_provider 
                do
                    create EnergyProviderRequestUpdateMaxEnergy with energy_provider = energy_provider, condominium = condominium, new_max_energy = new_max_energy

        nonconsuming choice CondominiumRequestMaxEnergy : ContractId CondominiumRequestUpdateMaxEnergy
            with 
                new_max_energy : Decimal
            controller condominium 
                do
                    create CondominiumRequestUpdateMaxEnergy with energy_provider = energy_provider, condominium = condominium, new_max_energy = new_max_energy


template EnergyProviderRequestUpdateMaxEnergy 
    with 
        energy_provider : Party
        condominium : Party
        new_max_energy : Decimal
    where
        signatory energy_provider, condominium

        choice CondominiumApproves : ChargingStationID
            controller condominium
                do
                    (fetchedContractId, fetchedContract) <- fetchByKey @ChargingStation (energy_provider, condominium)
                    archive fetchedContractId
                    create fetchedContract with max_energy = new_max_energy

template CondominiumRequestUpdateMaxEnergy
    with
        energy_provider : Party
        condominium : Party
        new_max_energy : Decimal
    where 
        signatory energy_provider, condominium

        choice EnergyProviderApproves : ChargingStationID
            controller energy_provider
                do
                    (fetchedContractId, fetchedContract) <- fetchByKey @ChargingStation (energy_provider, condominium)
                    archive fetchedContractId
                    create fetchedContract with max_energy = new_max_energy

template RequestFinishCharge
    with
        ev_user : Party
        energy_provider : Party
        condominium : Party
        cp_id : Text
    where
        signatory ev_user, energy_provider, condominium
        
        choice ApproveRequestFinishCharge : UserWithDebtID
            with
                price_per_energy_unit : Decimal
                total_energy : Decimal
                cs_id : ChargingStationID
            controller energy_provider
                do
                    exerciseByKey @CPUsed (energy_provider, condominium, ev_user) Archive
                    create CPFree with energy_provider = energy_provider, condominium = condominium, cp = cp_id
                    create UserWithDebt with energy_provider = energy_provider, condominium = condominium, ev_user = ev_user, price = price_per_energy_unit * total_energy


template UserRequestCompletedPayment
    with
        energy_provider : Party
        ev_user : Party
        condominium : Party
    where
        signatory energy_provider, ev_user, condominium

        choice ApproveUserRequestToCompletePayment : ()
            controller energy_provider
                do
                    exerciseByKey @UserWithDebt (energy_provider, condominium, ev_user) Archive

